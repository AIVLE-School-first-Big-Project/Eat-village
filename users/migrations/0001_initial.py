# Generated by Django 3.0.7 on 2022-04-23 06:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Communityboard',
            fields=[
                ('boardid', models.AutoField(db_column='boardID', primary_key=True, serialize=False)),
                ('header', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=50)),
                ('nickname', models.CharField(max_length=20)),
                ('detail', models.CharField(max_length=5000)),
                ('view', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'COMMUNITYBOARD',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Communityboardimage',
            fields=[
                ('photoid', models.AutoField(db_column='photoID', primary_key=True, serialize=False)),
                ('image', models.CharField(max_length=200)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'COMMUNITYBOARDIMAGE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Communitycomment',
            fields=[
                ('commentid', models.AutoField(db_column='commentID', primary_key=True, serialize=False)),
                ('parentcommentid', models.IntegerField(blank=True, db_column='parentcommentID', null=True)),
                ('detail', models.CharField(max_length=500)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'COMMUNITYCOMMENT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipeboard',
            fields=[
                ('boardid', models.AutoField(db_column='boardID', primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('ingredient', models.CharField(max_length=2000)),
                ('detail', models.CharField(max_length=5000)),
                ('view', models.IntegerField(blank=True, null=True)),
                ('recommended', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'RECIPEBOARD',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipeboardimage',
            fields=[
                ('photoid', models.AutoField(db_column='photoID', primary_key=True, serialize=False)),
                ('image', models.CharField(max_length=200)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'RECIPEBOARDIMAGE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipecomment',
            fields=[
                ('commentid', models.AutoField(db_column='commentID', primary_key=True, serialize=False)),
                ('parentcommentid', models.IntegerField(blank=True, db_column='parentcommentID', null=True)),
                ('detail', models.CharField(max_length=500)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'RECIPECOMMENT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipedata',
            fields=[
                ('recipeid', models.IntegerField(db_column='recipeID', primary_key=True, serialize=False)),
                ('recipeno', models.CharField(max_length=50)),
                ('recipename', models.CharField(max_length=255)),
                ('ingredient', models.CharField(max_length=5000)),
                ('amount', models.CharField(max_length=20)),
                ('cooktime', models.CharField(max_length=20)),
                ('level', models.CharField(max_length=20)),
                ('url', models.CharField(max_length=500)),
                ('tag', models.CharField(max_length=1000)),
                ('cookingmethod', models.CharField(max_length=255)),
                ('category_1', models.CharField(max_length=255)),
                ('foodtype', models.CharField(max_length=255)),
                ('category_2', models.CharField(max_length=255)),
                ('detail', models.CharField(max_length=5000)),
                ('time', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'RECIPEDATA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userbookmarkrecipe',
            fields=[
                ('bookmarkid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'USERBOOKMARKRECIPE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userrecommendedcommunity',
            fields=[
                ('likeid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'USERRECOMMENDEDCOMMUNITY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=20)),
                ('allergyinfo', models.CharField(blank=True, max_length=250, null=True)),
                ('notpreferred', models.CharField(blank=True, max_length=250, null=True)),
                ('cookingmethod', models.CharField(blank=True, max_length=250, null=True)),
                ('preferredcategory_1', models.CharField(blank=True, max_length=250, null=True)),
                ('preferredcategory_2', models.CharField(blank=True, max_length=250, null=True)),
                ('cookingtime', models.CharField(blank=True, max_length=250, null=True)),
                ('location', models.CharField(max_length=250)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
